// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: urls.proto

package sdk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the available sort keys for retrieving urls
type URL_SORT_KEY int32

const (
	// Fetch ordered results by id
	URL_SORT_KEY_URL_SORT_KEY_ID_UNSPECIFIED URL_SORT_KEY = 0
	// Fetch ordered results by the creation timestamp
	URL_SORT_KEY_URL_SORT_KEY_CREATED_AT URL_SORT_KEY = 1
	// Fetch ordered results by the modified timestamp
	URL_SORT_KEY_URL_SORT_KEY_MODIFIED_AT URL_SORT_KEY = 2
	// Fetch ordered results by name
	URL_SORT_KEY_URL_SORT_KEY_NAME URL_SORT_KEY = 10
	// Fetch ordered results by code
	URL_SORT_KEY_URL_SORT_KEY_CODE URL_SORT_KEY = 11
	// Fetch ordered results by redirection endpoint
	URL_SORT_KEY_URL_SORT_KEY_REDIRECTS_TO URL_SORT_KEY = 12
	// Fetch ordered results by expiration timestamp
	URL_SORT_KEY_URL_SORT_KEY_EXPIRES_AT URL_SORT_KEY = 13
)

// Enum value maps for URL_SORT_KEY.
var (
	URL_SORT_KEY_name = map[int32]string{
		0:  "URL_SORT_KEY_ID_UNSPECIFIED",
		1:  "URL_SORT_KEY_CREATED_AT",
		2:  "URL_SORT_KEY_MODIFIED_AT",
		10: "URL_SORT_KEY_NAME",
		11: "URL_SORT_KEY_CODE",
		12: "URL_SORT_KEY_REDIRECTS_TO",
		13: "URL_SORT_KEY_EXPIRES_AT",
	}
	URL_SORT_KEY_value = map[string]int32{
		"URL_SORT_KEY_ID_UNSPECIFIED": 0,
		"URL_SORT_KEY_CREATED_AT":     1,
		"URL_SORT_KEY_MODIFIED_AT":    2,
		"URL_SORT_KEY_NAME":           10,
		"URL_SORT_KEY_CODE":           11,
		"URL_SORT_KEY_REDIRECTS_TO":   12,
		"URL_SORT_KEY_EXPIRES_AT":     13,
	}
)

func (x URL_SORT_KEY) Enum() *URL_SORT_KEY {
	p := new(URL_SORT_KEY)
	*p = x
	return p
}

func (x URL_SORT_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (URL_SORT_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_urls_proto_enumTypes[0].Descriptor()
}

func (URL_SORT_KEY) Type() protoreflect.EnumType {
	return &file_urls_proto_enumTypes[0]
}

func (x URL_SORT_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use URL_SORT_KEY.Descriptor instead.
func (URL_SORT_KEY) EnumDescriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{0}
}

// Describes the data structure to create a url
type URLsServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The optional name of the url
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The optional description of the url
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// The redirection URL
	RedirectsTo string `protobuf:"bytes,13,opt,name=redirects_to,json=redirectsTo,proto3" json:"redirects_to,omitempty"`
	// Stores the UNIX timestamp of when this rule expires (0 denotes that the rule never expires)
	ExpiresAt int64 `protobuf:"varint,14,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *URLsServiceCreateRequest) Reset() {
	*x = URLsServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsServiceCreateRequest) ProtoMessage() {}

func (x *URLsServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*URLsServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{0}
}

func (x *URLsServiceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLsServiceCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URLsServiceCreateRequest) GetRedirectsTo() string {
	if x != nil {
		return x.RedirectsTo
	}
	return ""
}

func (x *URLsServiceCreateRequest) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Describes the data structure to perform the update (draft/revision) operation on a url
type URLsServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the resource that needs to be updated
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The optional name of the url
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The optional description of the url
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// The redirection URL
	RedirectsTo string `protobuf:"bytes,13,opt,name=redirects_to,json=redirectsTo,proto3" json:"redirects_to,omitempty"`
	// Stores the UNIX timestamp of when this rule expires (0 denotes that the rule never expires)
	ExpiresAt int64 `protobuf:"varint,14,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *URLsServiceUpdateRequest) Reset() {
	*x = URLsServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsServiceUpdateRequest) ProtoMessage() {}

func (x *URLsServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*URLsServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{1}
}

func (x *URLsServiceUpdateRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *URLsServiceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLsServiceUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URLsServiceUpdateRequest) GetRedirectsTo() string {
	if x != nil {
		return x.RedirectsTo
	}
	return ""
}

func (x *URLsServiceUpdateRequest) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Describes the data structure of each url on the platform
type URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stores the metadata of this resource
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Stores the short URL that can be used to access this resource
	ShortUrl string `protobuf:"bytes,2,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	// The optional name of the url
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The optional description of the url
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// The code, which serves as the endpoint
	Code string `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	// The redirection URL
	RedirectsTo string `protobuf:"bytes,13,opt,name=redirects_to,json=redirectsTo,proto3" json:"redirects_to,omitempty"`
	// Stores the UNIX timestamp of when this rule expires (0 denotes that the rule never expires)
	ExpiresAt int64 `protobuf:"varint,14,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *URL) Reset() {
	*x = URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{2}
}

func (x *URL) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *URL) GetShortUrl() string {
	if x != nil {
		return x.ShortUrl
	}
	return ""
}

func (x *URL) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URL) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *URL) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *URL) GetRedirectsTo() string {
	if x != nil {
		return x.RedirectsTo
	}
	return ""
}

func (x *URL) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Describes the data structure that stores a list of urls
type URLsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of urls
	List []*URL `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *URLsList) Reset() {
	*x = URLsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsList) ProtoMessage() {}

func (x *URLsList) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsList.ProtoReflect.Descriptor instead.
func (*URLsList) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{3}
}

func (x *URLsList) GetList() []*URL {
	if x != nil {
		return x.List
	}
	return nil
}

// Describes a pagination request to retrieve records
type URLsServicePaginationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then returns only active records. If false, then returns only inactive records
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=nineT90.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey URL_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=nineT90.URL_SORT_KEY" json:"sort_key,omitempty"`
}

func (x *URLsServicePaginationReq) Reset() {
	*x = URLsServicePaginationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsServicePaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsServicePaginationReq) ProtoMessage() {}

func (x *URLsServicePaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsServicePaginationReq.ProtoReflect.Descriptor instead.
func (*URLsServicePaginationReq) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{4}
}

func (x *URLsServicePaginationReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *URLsServicePaginationReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *URLsServicePaginationReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *URLsServicePaginationReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *URLsServicePaginationReq) GetSortKey() URL_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return URL_SORT_KEY_URL_SORT_KEY_ID_UNSPECIFIED
}

// Describes the data structure that responds to a pagination request
type URLPaginationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of records in this payload
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The total number of records that are available
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The list of records
	Payload []*URL `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (x *URLPaginationResp) Reset() {
	*x = URLPaginationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLPaginationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLPaginationResp) ProtoMessage() {}

func (x *URLPaginationResp) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLPaginationResp.ProtoReflect.Descriptor instead.
func (*URLPaginationResp) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{5}
}

func (x *URLPaginationResp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *URLPaginationResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *URLPaginationResp) GetPayload() []*URL {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Describes the base request payload of a filter search
type URLsServiceFilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then returns only active records. If false, then returns only inactive records
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=nineT90.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey URL_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=nineT90.URL_SORT_KEY" json:"sort_key,omitempty"`
	// The minimum timestamp that needs to be considered to filter by creation
	CreationTimestampStart int64 `protobuf:"varint,6,opt,name=creation_timestamp_start,json=creationTimestampStart,proto3" json:"creation_timestamp_start,omitempty"`
	// The maximum timestamp that needs to be considered to filter by creation
	CreationTimestampEnd int64 `protobuf:"varint,7,opt,name=creation_timestamp_end,json=creationTimestampEnd,proto3" json:"creation_timestamp_end,omitempty"`
	// The name of the url
	Name string `protobuf:"bytes,20,opt,name=name,proto3" json:"name,omitempty"`
	// Code of the url
	Code string `protobuf:"bytes,21,opt,name=code,proto3" json:"code,omitempty"`
	// Redirection endpoint
	RedirectsTo string `protobuf:"bytes,22,opt,name=redirects_to,json=redirectsTo,proto3" json:"redirects_to,omitempty"`
}

func (x *URLsServiceFilterReq) Reset() {
	*x = URLsServiceFilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsServiceFilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsServiceFilterReq) ProtoMessage() {}

func (x *URLsServiceFilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsServiceFilterReq.ProtoReflect.Descriptor instead.
func (*URLsServiceFilterReq) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{6}
}

func (x *URLsServiceFilterReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *URLsServiceFilterReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *URLsServiceFilterReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *URLsServiceFilterReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *URLsServiceFilterReq) GetSortKey() URL_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return URL_SORT_KEY_URL_SORT_KEY_ID_UNSPECIFIED
}

func (x *URLsServiceFilterReq) GetCreationTimestampStart() int64 {
	if x != nil {
		return x.CreationTimestampStart
	}
	return 0
}

func (x *URLsServiceFilterReq) GetCreationTimestampEnd() int64 {
	if x != nil {
		return x.CreationTimestampEnd
	}
	return 0
}

func (x *URLsServiceFilterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLsServiceFilterReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *URLsServiceFilterReq) GetRedirectsTo() string {
	if x != nil {
		return x.RedirectsTo
	}
	return ""
}

// Describes the request payload for performing a generic search operation on records
type URLsServiceSearchAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then returns only active records. If false, then returns only inactive records
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The number of records that need to be sent in the response. Returns all records if it is set to -1
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The number that need to be offset by before fetching the records
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sort order that is to be used to fetch the pagination response
	SortOrder SORT_ORDER `protobuf:"varint,4,opt,name=sort_order,json=sortOrder,proto3,enum=nineT90.SORT_ORDER" json:"sort_order,omitempty"`
	// The sort key that is to be used to fetch the pagination response
	SortKey URL_SORT_KEY `protobuf:"varint,5,opt,name=sort_key,json=sortKey,proto3,enum=nineT90.URL_SORT_KEY" json:"sort_key,omitempty"`
	// Describes the key with which the search operation needs to be performed
	SearchKey string `protobuf:"bytes,11,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
}

func (x *URLsServiceSearchAllReq) Reset() {
	*x = URLsServiceSearchAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_urls_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLsServiceSearchAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLsServiceSearchAllReq) ProtoMessage() {}

func (x *URLsServiceSearchAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_urls_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLsServiceSearchAllReq.ProtoReflect.Descriptor instead.
func (*URLsServiceSearchAllReq) Descriptor() ([]byte, []int) {
	return file_urls_proto_rawDescGZIP(), []int{7}
}

func (x *URLsServiceSearchAllReq) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *URLsServiceSearchAllReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *URLsServiceSearchAllReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *URLsServiceSearchAllReq) GetSortOrder() SORT_ORDER {
	if x != nil {
		return x.SortOrder
	}
	return SORT_ORDER_ASCENDING_UNSPECIFIED
}

func (x *URLsServiceSearchAllReq) GetSortKey() URL_SORT_KEY {
	if x != nil {
		return x.SortKey
	}
	return URL_SORT_KEY_URL_SORT_KEY_ID_UNSPECIFIED
}

func (x *URLsServiceSearchAllReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

var File_urls_proto protoreflect.FileDescriptor

var file_urls_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x69,
	0x6e, 0x65, 0x54, 0x39, 0x30, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x88, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x12, 0x26, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x55, 0x52,
	0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0xf0, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x69, 0x6e, 0x65,
	0x54, 0x39, 0x30, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x22, 0x2c, 0x0a, 0x08, 0x55, 0x52, 0x4c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xdd, 0x01, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x20, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x5f, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x67, 0x0a, 0x11, 0x55, 0x52, 0x4c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x14, 0x55, 0x52,
	0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10,
	0xfa, 0x42, 0x0d, 0x22, 0x0b, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e,
	0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x08,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x22, 0x84, 0x02, 0x0a, 0x17, 0x55, 0x52,
	0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x10, 0xfa, 0x42, 0x0d, 0x22, 0x0b, 0x28, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x5f,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x2a, 0xd4, 0x01, 0x0a, 0x0c, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x52, 0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52,
	0x4c, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x53, 0x5f, 0x41, 0x54, 0x10, 0x0d, 0x32, 0xc3, 0x03, 0x0a, 0x0b, 0x55, 0x52, 0x4c, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55,
	0x52, 0x4c, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x6e,
	0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x12, 0x39, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39,
	0x30, 0x2e, 0x55, 0x52, 0x4c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x6e, 0x69, 0x6e,
	0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54,
	0x39, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54,
	0x39, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x13, 0x2e,
	0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x6e, 0x69,
	0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x42, 0x79, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54,
	0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x12, 0x35, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x6e, 0x69, 0x6e, 0x65, 0x54, 0x39, 0x30, 0x2e, 0x55, 0x52, 0x4c, 0x42, 0x0a, 0x5a,
	0x08, 0x39, 0x74, 0x39, 0x30, 0x2f, 0x73, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_urls_proto_rawDescOnce sync.Once
	file_urls_proto_rawDescData = file_urls_proto_rawDesc
)

func file_urls_proto_rawDescGZIP() []byte {
	file_urls_proto_rawDescOnce.Do(func() {
		file_urls_proto_rawDescData = protoimpl.X.CompressGZIP(file_urls_proto_rawDescData)
	})
	return file_urls_proto_rawDescData
}

var file_urls_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_urls_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_urls_proto_goTypes = []interface{}{
	(URL_SORT_KEY)(0),                // 0: nineT90.URL_SORT_KEY
	(*URLsServiceCreateRequest)(nil), // 1: nineT90.URLsServiceCreateRequest
	(*URLsServiceUpdateRequest)(nil), // 2: nineT90.URLsServiceUpdateRequest
	(*URL)(nil),                      // 3: nineT90.URL
	(*URLsList)(nil),                 // 4: nineT90.URLsList
	(*URLsServicePaginationReq)(nil), // 5: nineT90.URLsServicePaginationReq
	(*URLPaginationResp)(nil),        // 6: nineT90.URLPaginationResp
	(*URLsServiceFilterReq)(nil),     // 7: nineT90.URLsServiceFilterReq
	(*URLsServiceSearchAllReq)(nil),  // 8: nineT90.URLsServiceSearchAllReq
	(*Metadata)(nil),                 // 9: nineT90.Metadata
	(SORT_ORDER)(0),                  // 10: nineT90.SORT_ORDER
	(*Identifier)(nil),               // 11: nineT90.Identifier
	(*SearchKeyRequest)(nil),         // 12: nineT90.SearchKeyRequest
}
var file_urls_proto_depIdxs = []int32{
	9,  // 0: nineT90.URL.metadata:type_name -> nineT90.Metadata
	3,  // 1: nineT90.URLsList.list:type_name -> nineT90.URL
	10, // 2: nineT90.URLsServicePaginationReq.sort_order:type_name -> nineT90.SORT_ORDER
	0,  // 3: nineT90.URLsServicePaginationReq.sort_key:type_name -> nineT90.URL_SORT_KEY
	3,  // 4: nineT90.URLPaginationResp.payload:type_name -> nineT90.URL
	10, // 5: nineT90.URLsServiceFilterReq.sort_order:type_name -> nineT90.SORT_ORDER
	0,  // 6: nineT90.URLsServiceFilterReq.sort_key:type_name -> nineT90.URL_SORT_KEY
	10, // 7: nineT90.URLsServiceSearchAllReq.sort_order:type_name -> nineT90.SORT_ORDER
	0,  // 8: nineT90.URLsServiceSearchAllReq.sort_key:type_name -> nineT90.URL_SORT_KEY
	1,  // 9: nineT90.URLsService.Create:input_type -> nineT90.URLsServiceCreateRequest
	1,  // 10: nineT90.URLsService.Upsert:input_type -> nineT90.URLsServiceCreateRequest
	2,  // 11: nineT90.URLsService.Update:input_type -> nineT90.URLsServiceUpdateRequest
	11, // 12: nineT90.URLsService.Archive:input_type -> nineT90.Identifier
	11, // 13: nineT90.URLsService.Restore:input_type -> nineT90.Identifier
	11, // 14: nineT90.URLsService.Purge:input_type -> nineT90.Identifier
	11, // 15: nineT90.URLsService.ViewByUUID:input_type -> nineT90.Identifier
	12, // 16: nineT90.URLsService.ViewByCode:input_type -> nineT90.SearchKeyRequest
	3,  // 17: nineT90.URLsService.Create:output_type -> nineT90.URL
	3,  // 18: nineT90.URLsService.Upsert:output_type -> nineT90.URL
	3,  // 19: nineT90.URLsService.Update:output_type -> nineT90.URL
	11, // 20: nineT90.URLsService.Archive:output_type -> nineT90.Identifier
	11, // 21: nineT90.URLsService.Restore:output_type -> nineT90.Identifier
	11, // 22: nineT90.URLsService.Purge:output_type -> nineT90.Identifier
	3,  // 23: nineT90.URLsService.ViewByUUID:output_type -> nineT90.URL
	3,  // 24: nineT90.URLsService.ViewByCode:output_type -> nineT90.URL
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_urls_proto_init() }
func file_urls_proto_init() {
	if File_urls_proto != nil {
		return
	}
	file_base_proto_init()
	file_validate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_urls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsServicePaginationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLPaginationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsServiceFilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_urls_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLsServiceSearchAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_urls_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_urls_proto_goTypes,
		DependencyIndexes: file_urls_proto_depIdxs,
		EnumInfos:         file_urls_proto_enumTypes,
		MessageInfos:      file_urls_proto_msgTypes,
	}.Build()
	File_urls_proto = out.File
	file_urls_proto_rawDesc = nil
	file_urls_proto_goTypes = nil
	file_urls_proto_depIdxs = nil
}
