// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: urls_9t90.proto

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// URLsServiceClient is the client API for URLsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsServiceClient interface {
	// Create a url
	Create(ctx context.Context, in *URLsServiceCreateRequest, opts ...grpc.CallOption) (*URL, error)
	// Upsert a url (create if does not exist, update if it already exists)
	Upsert(ctx context.Context, in *URLsServiceCreateRequest, opts ...grpc.CallOption) (*URL, error)
	// Update a url
	Update(ctx context.Context, in *URLsServiceUpdateRequest, opts ...grpc.CallOption) (*URL, error)
	// Archive the url
	Archive(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error)
	// Restore the url
	Restore(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error)
	// Purge the url
	Purge(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error)
	// View by UUID
	ViewByUUID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*URL, error)
	// View by Code
	ViewByCode(ctx context.Context, in *SearchKeyRequest, opts ...grpc.CallOption) (*URL, error)
}

type uRLsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsServiceClient(cc grpc.ClientConnInterface) URLsServiceClient {
	return &uRLsServiceClient{cc}
}

func (c *uRLsServiceClient) Create(ctx context.Context, in *URLsServiceCreateRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) Upsert(ctx context.Context, in *URLsServiceCreateRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) Update(ctx context.Context, in *URLsServiceUpdateRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) Archive(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) Restore(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) Purge(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) ViewByUUID(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/ViewByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsServiceClient) ViewByCode(ctx context.Context, in *SearchKeyRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/nineT90.URLsService/ViewByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsServiceServer is the server API for URLsService service.
// All implementations must embed UnimplementedURLsServiceServer
// for forward compatibility
type URLsServiceServer interface {
	// Create a url
	Create(context.Context, *URLsServiceCreateRequest) (*URL, error)
	// Upsert a url (create if does not exist, update if it already exists)
	Upsert(context.Context, *URLsServiceCreateRequest) (*URL, error)
	// Update a url
	Update(context.Context, *URLsServiceUpdateRequest) (*URL, error)
	// Archive the url
	Archive(context.Context, *Identifier) (*Identifier, error)
	// Restore the url
	Restore(context.Context, *Identifier) (*Identifier, error)
	// Purge the url
	Purge(context.Context, *Identifier) (*Identifier, error)
	// View by UUID
	ViewByUUID(context.Context, *Identifier) (*URL, error)
	// View by Code
	ViewByCode(context.Context, *SearchKeyRequest) (*URL, error)
	mustEmbedUnimplementedURLsServiceServer()
}

// UnimplementedURLsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedURLsServiceServer struct {
}

func (UnimplementedURLsServiceServer) Create(context.Context, *URLsServiceCreateRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedURLsServiceServer) Upsert(context.Context, *URLsServiceCreateRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedURLsServiceServer) Update(context.Context, *URLsServiceUpdateRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedURLsServiceServer) Archive(context.Context, *Identifier) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedURLsServiceServer) Restore(context.Context, *Identifier) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedURLsServiceServer) Purge(context.Context, *Identifier) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}
func (UnimplementedURLsServiceServer) ViewByUUID(context.Context, *Identifier) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByUUID not implemented")
}
func (UnimplementedURLsServiceServer) ViewByCode(context.Context, *SearchKeyRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByCode not implemented")
}
func (UnimplementedURLsServiceServer) mustEmbedUnimplementedURLsServiceServer() {}

// UnsafeURLsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsServiceServer will
// result in compilation errors.
type UnsafeURLsServiceServer interface {
	mustEmbedUnimplementedURLsServiceServer()
}

func RegisterURLsServiceServer(s grpc.ServiceRegistrar, srv URLsServiceServer) {
	s.RegisterService(&URLsService_ServiceDesc, srv)
}

func _URLsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLsServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Create(ctx, req.(*URLsServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLsServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Upsert(ctx, req.(*URLsServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLsServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Update(ctx, req.(*URLsServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Archive(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Restore(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).Purge(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_ViewByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).ViewByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/ViewByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).ViewByUUID(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLsService_ViewByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServiceServer).ViewByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nineT90.URLsService/ViewByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServiceServer).ViewByCode(ctx, req.(*SearchKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLsService_ServiceDesc is the grpc.ServiceDesc for URLsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nineT90.URLsService",
	HandlerType: (*URLsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _URLsService_Create_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _URLsService_Upsert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _URLsService_Update_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _URLsService_Archive_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _URLsService_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _URLsService_Purge_Handler,
		},
		{
			MethodName: "ViewByUUID",
			Handler:    _URLsService_ViewByUUID_Handler,
		},
		{
			MethodName: "ViewByCode",
			Handler:    _URLsService_ViewByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urls_9t90.proto",
}
