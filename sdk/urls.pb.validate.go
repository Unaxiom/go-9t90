// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: urls.proto

package sdk

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _urls_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on URLsServiceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *URLsServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLsServiceCreateRequestMultiError, or nil if none found.
func (m *URLsServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if uri, err := url.Parse(m.GetRedirectsTo()); err != nil {
		err = URLsServiceCreateRequestValidationError{
			field:  "RedirectsTo",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := URLsServiceCreateRequestValidationError{
			field:  "RedirectsTo",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() < 0 {
		err := URLsServiceCreateRequestValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return URLsServiceCreateRequestMultiError(errors)
	}

	return nil
}

// URLsServiceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by URLsServiceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type URLsServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsServiceCreateRequestMultiError) AllErrors() []error { return m }

// URLsServiceCreateRequestValidationError is the validation error returned by
// URLsServiceCreateRequest.Validate if the designated constraints aren't met.
type URLsServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsServiceCreateRequestValidationError) ErrorName() string {
	return "URLsServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e URLsServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsServiceCreateRequestValidationError{}

// Validate checks the field values on URLsServiceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *URLsServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLsServiceUpdateRequestMultiError, or nil if none found.
func (m *URLsServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = URLsServiceUpdateRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Description

	if uri, err := url.Parse(m.GetRedirectsTo()); err != nil {
		err = URLsServiceUpdateRequestValidationError{
			field:  "RedirectsTo",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := URLsServiceUpdateRequestValidationError{
			field:  "RedirectsTo",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() < 0 {
		err := URLsServiceUpdateRequestValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return URLsServiceUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *URLsServiceUpdateRequest) _validateUuid(uuid string) error {
	if matched := _urls_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// URLsServiceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by URLsServiceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type URLsServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsServiceUpdateRequestMultiError) AllErrors() []error { return m }

// URLsServiceUpdateRequestValidationError is the validation error returned by
// URLsServiceUpdateRequest.Validate if the designated constraints aren't met.
type URLsServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsServiceUpdateRequestValidationError) ErrorName() string {
	return "URLsServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e URLsServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsServiceUpdateRequestValidationError{}

// Validate checks the field values on URL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *URL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in URLMultiError, or nil if none found.
func (m *URL) ValidateAll() error {
	return m.validate(true)
}

func (m *URL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, URLValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, URLValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return URLValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShortUrl

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Code

	if uri, err := url.Parse(m.GetRedirectsTo()); err != nil {
		err = URLValidationError{
			field:  "RedirectsTo",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := URLValidationError{
			field:  "RedirectsTo",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpiresAt() < 0 {
		err := URLValidationError{
			field:  "ExpiresAt",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return URLMultiError(errors)
	}

	return nil
}

// URLMultiError is an error wrapping multiple validation errors returned by
// URL.ValidateAll() if the designated constraints aren't met.
type URLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLMultiError) AllErrors() []error { return m }

// URLValidationError is the validation error returned by URL.Validate if the
// designated constraints aren't met.
type URLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLValidationError) ErrorName() string { return "URLValidationError" }

// Error satisfies the builtin error interface
func (e URLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLValidationError{}

// Validate checks the field values on URLsList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *URLsList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in URLsListMultiError, or nil
// if none found.
func (m *URLsList) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, URLsListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, URLsListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return URLsListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return URLsListMultiError(errors)
	}

	return nil
}

// URLsListMultiError is an error wrapping multiple validation errors returned
// by URLsList.ValidateAll() if the designated constraints aren't met.
type URLsListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsListMultiError) AllErrors() []error { return m }

// URLsListValidationError is the validation error returned by
// URLsList.Validate if the designated constraints aren't met.
type URLsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsListValidationError) ErrorName() string { return "URLsListValidationError" }

// Error satisfies the builtin error interface
func (e URLsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsListValidationError{}

// Validate checks the field values on URLsServicePaginationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *URLsServicePaginationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsServicePaginationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLsServicePaginationReqMultiError, or nil if none found.
func (m *URLsServicePaginationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsServicePaginationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if m.GetCount() <= 0 {
		err := URLsServicePaginationReqValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := URLsServicePaginationReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortOrder

	// no validation rules for SortKey

	if len(errors) > 0 {
		return URLsServicePaginationReqMultiError(errors)
	}

	return nil
}

// URLsServicePaginationReqMultiError is an error wrapping multiple validation
// errors returned by URLsServicePaginationReq.ValidateAll() if the designated
// constraints aren't met.
type URLsServicePaginationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsServicePaginationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsServicePaginationReqMultiError) AllErrors() []error { return m }

// URLsServicePaginationReqValidationError is the validation error returned by
// URLsServicePaginationReq.Validate if the designated constraints aren't met.
type URLsServicePaginationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsServicePaginationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsServicePaginationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsServicePaginationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsServicePaginationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsServicePaginationReqValidationError) ErrorName() string {
	return "URLsServicePaginationReqValidationError"
}

// Error satisfies the builtin error interface
func (e URLsServicePaginationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsServicePaginationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsServicePaginationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsServicePaginationReqValidationError{}

// Validate checks the field values on URLPaginationResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *URLPaginationResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLPaginationResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLPaginationRespMultiError, or nil if none found.
func (m *URLPaginationResp) ValidateAll() error {
	return m.validate(true)
}

func (m *URLPaginationResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Total

	for idx, item := range m.GetPayload() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, URLPaginationRespValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, URLPaginationRespValidationError{
						field:  fmt.Sprintf("Payload[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return URLPaginationRespValidationError{
					field:  fmt.Sprintf("Payload[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return URLPaginationRespMultiError(errors)
	}

	return nil
}

// URLPaginationRespMultiError is an error wrapping multiple validation errors
// returned by URLPaginationResp.ValidateAll() if the designated constraints
// aren't met.
type URLPaginationRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLPaginationRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLPaginationRespMultiError) AllErrors() []error { return m }

// URLPaginationRespValidationError is the validation error returned by
// URLPaginationResp.Validate if the designated constraints aren't met.
type URLPaginationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLPaginationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLPaginationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLPaginationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLPaginationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLPaginationRespValidationError) ErrorName() string {
	return "URLPaginationRespValidationError"
}

// Error satisfies the builtin error interface
func (e URLPaginationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLPaginationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLPaginationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLPaginationRespValidationError{}

// Validate checks the field values on URLsServiceFilterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *URLsServiceFilterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsServiceFilterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLsServiceFilterReqMultiError, or nil if none found.
func (m *URLsServiceFilterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsServiceFilterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if m.GetCount() < -1 {
		err := URLsServiceFilterReqValidationError{
			field:  "Count",
			reason: "value must be greater than or equal to -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := URLsServiceFilterReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortOrder

	// no validation rules for SortKey

	// no validation rules for CreationTimestampStart

	// no validation rules for CreationTimestampEnd

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for RedirectsTo

	if len(errors) > 0 {
		return URLsServiceFilterReqMultiError(errors)
	}

	return nil
}

// URLsServiceFilterReqMultiError is an error wrapping multiple validation
// errors returned by URLsServiceFilterReq.ValidateAll() if the designated
// constraints aren't met.
type URLsServiceFilterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsServiceFilterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsServiceFilterReqMultiError) AllErrors() []error { return m }

// URLsServiceFilterReqValidationError is the validation error returned by
// URLsServiceFilterReq.Validate if the designated constraints aren't met.
type URLsServiceFilterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsServiceFilterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsServiceFilterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsServiceFilterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsServiceFilterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsServiceFilterReqValidationError) ErrorName() string {
	return "URLsServiceFilterReqValidationError"
}

// Error satisfies the builtin error interface
func (e URLsServiceFilterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsServiceFilterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsServiceFilterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsServiceFilterReqValidationError{}

// Validate checks the field values on URLsServiceSearchAllReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *URLsServiceSearchAllReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on URLsServiceSearchAllReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// URLsServiceSearchAllReqMultiError, or nil if none found.
func (m *URLsServiceSearchAllReq) ValidateAll() error {
	return m.validate(true)
}

func (m *URLsServiceSearchAllReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if m.GetCount() < -1 {
		err := URLsServiceSearchAllReqValidationError{
			field:  "Count",
			reason: "value must be greater than or equal to -1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := URLsServiceSearchAllReqValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SortOrder

	// no validation rules for SortKey

	// no validation rules for SearchKey

	if len(errors) > 0 {
		return URLsServiceSearchAllReqMultiError(errors)
	}

	return nil
}

// URLsServiceSearchAllReqMultiError is an error wrapping multiple validation
// errors returned by URLsServiceSearchAllReq.ValidateAll() if the designated
// constraints aren't met.
type URLsServiceSearchAllReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m URLsServiceSearchAllReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m URLsServiceSearchAllReqMultiError) AllErrors() []error { return m }

// URLsServiceSearchAllReqValidationError is the validation error returned by
// URLsServiceSearchAllReq.Validate if the designated constraints aren't met.
type URLsServiceSearchAllReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e URLsServiceSearchAllReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e URLsServiceSearchAllReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e URLsServiceSearchAllReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e URLsServiceSearchAllReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e URLsServiceSearchAllReqValidationError) ErrorName() string {
	return "URLsServiceSearchAllReqValidationError"
}

// Error satisfies the builtin error interface
func (e URLsServiceSearchAllReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sURLsServiceSearchAllReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = URLsServiceSearchAllReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = URLsServiceSearchAllReqValidationError{}
